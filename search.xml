<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java基础语法</title>
      <link href="/2021/09/22/java-ji-chu-yu-fa/"/>
      <url>/2021/09/22/java-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1入门程序说明"><a href="#1-1入门程序说明" class="headerlink" title="1.1入门程序说明"></a>1.1入门程序说明</h3><h4 id="编译和运行是两回事"><a href="#编译和运行是两回事" class="headerlink" title="编译和运行是两回事"></a>编译和运行是两回事</h4><p>编译：是指将我们编写的Java源文件翻译成JVM认识的class文件，在这个过程中， javac 编译器会检查我们<br>所写的程序是否有错误，有错误就会提示出来，如果没有错误就会编译成功。<br>运行：是指将 class文件 交给JVM去运行，此时JVM就会去执行我们编写的程序了。</p><h4 id="关于main方法"><a href="#关于main方法" class="headerlink" title="关于main方法"></a>关于main方法</h4><p>main方法：称为主方法。写法是固定格式不可以更改。main方法是程序的入口点或起始点，无论我们编写多<br>少程序，JVM在运行的时候，都会从main方法这里开始执行。</p><h3 id="1-2添加注释comment"><a href="#1-2添加注释comment" class="headerlink" title="1.2添加注释comment"></a>1.2添加注释comment</h3><p>注释：就是对代码的解释和说明。其目的是让人们能够更加轻松地了解代码。为代码添加注释，是十分必须<br>要的，它不影响程序的编译和运行。<br>Java中有单行注释和多行注释<br>单行注释以 //开头  换行结束<br>多行注释以 /*<em>开头 以</em>/结束</p><h3 id="1-3关键字keywords"><a href="#1-3关键字keywords" class="headerlink" title="1.3关键字keywords"></a>1.3关键字keywords</h3><p><strong>关键字</strong>：是指在程序中，Java已经定义好的单词，具有特殊含义。<br>HelloWorld案例中，出现的关键字有 <em>public 、 class 、 static 、 void</em> 等，这些单词已经被<br>Java定义好，全部都是小写字母，notepad++中颜色特殊。<br>关键字比较多，不能死记硬背，学到哪里记到哪里即可。 </p><h3 id="1-4标识符"><a href="#1-4标识符" class="headerlink" title="1.4标识符"></a>1.4标识符</h3><p><strong>标识符</strong>：是指在程序中，我们自己定义内容。比如类的名字、方法的名字和变量的名字等等，都是标识符。<br>HelloWorld案例中，出现的标识符有类名字 HelloWorld  。</p><p><strong>命名规则： 硬性要求</strong><br>标识符可以包含 英文字母26个(区分大小写) 、 0-9数字 、 $（美元符号） 和 _（下划线） 。<br>标识符不能以数字开头。<br>标识符不能是关键字。<br><strong>命名规范： 软性建议</strong><br>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式）。<br>方法名规范： 首字母小写，后面每个单词首字母大写（小驼峰式）。<br>变量名规范：全部小写。  </p><h3 id="2-1常量"><a href="#2-1常量" class="headerlink" title="2.1常量"></a>2.1常量</h3><p><strong>常量：是指在Java程序中固定不变的数据。</strong></p><h3 id="2-2-分类"><a href="#2-2-分类" class="headerlink" title="2.2 分类"></a>2.2 分类</h3><table><thead><tr><th>类型</th><th>含义</th><th>数据举例</th></tr></thead><tbody><tr><td>整数常量</td><td>所有的整数</td><td>0，1， 567， -9</td></tr><tr><td>小数常量</td><td>所有的小数</td><td>0.0， -0.1， 2.55</td></tr><tr><td>字符常量</td><td>单引号引起来,只能写一个字符,必须有内容</td><td>‘a’ ， ‘ ‘， ‘好’</td></tr><tr><td>字符串常量</td><td>双引号引起来,可以写多个字符,也可以不写</td><td>“A” ，”Hello” ，”你好” ，””</td></tr><tr><td>布尔常量</td><td>只有两个值（流程控制中讲解）</td><td>true ， false</td></tr><tr><td>空常量</td><td>只有一个值（引用数据类型中讲解）</td><td>null</td></tr></tbody></table><h3 id="2-3练习"><a href="#2-3练习" class="headerlink" title="2.3练习"></a>2.3练习</h3><p>需求：输出各种类型的常量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstantDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出整数常量</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出小数常量</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0.125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出字符常量</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出布尔常量</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出字符串常量</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好啊Java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1变量概述"><a href="#3-1变量概述" class="headerlink" title="3.1变量概述"></a>3.1变量概述</h3><ul><li><strong>变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量</strong> 。</li></ul><blockquote><p>数学中，可以使用字母代替数字运算,例如 x=1+5 或者 6=x+5。<br>程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存5，x也可<br>以保存6，这样x保存的数据是可以改变的，也就是我们所讲解的变量。  </p></blockquote><p>Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。  </p><h3 id="3-2-数据类型"><a href="#3-2-数据类型" class="headerlink" title="3.2 数据类型"></a>3.2 数据类型</h3><p>Java的数据类型分为两大类：</p><ul><li><strong>基本数据类型</strong>：包括 整数 、 浮点数 、 字符 、 布尔 。</li><li><strong>引用数据类型</strong>：包括 类 、 数组 、 接口 。</li></ul><p><strong>基本数据类型</strong></p><p>四类八种基本数据类型：  </p><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>-128~127</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>-32768~32767</td></tr><tr><td>整型</td><td>int（默认）</td><td>4个字节</td><td>-231次方~2的31次方-1</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-2的63次方~2的63次方-1</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4个字节</td><td>1.4013E-45~3.4028E+38</td></tr><tr><td>双精度浮点数</td><td>double（默认）</td><td>8个字节</td><td>4.9E-324~1.7977E+308</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>0-65535</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>true，false</td></tr></tbody></table><blockquote><p>Java中的默认类型：整数类型是 int 、浮点类型是 double 。  </p></blockquote><h3 id="3-3-变量的定义"><a href="#3-3-变量的定义" class="headerlink" title="3.3 变量的定义"></a>3.3 变量的定义</h3><p>变量定义的格式包括三个要素： 数据类型 、 变量名 、 数据值 。      </p><p><strong>格式</strong>  </p><pre><code>数据类型 变量名 = 数据值;  </code></pre><p><strong>练习</strong></p><p>定义所有基本数据类型的变量，代码如下：  </p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//定义字节型变量</span>    <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义短整型变量</span>    <span class="token keyword">short</span> s <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义整型变量</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义长整型变量</span>    <span class="token keyword">long</span> l <span class="token operator">=</span> 12345678900L<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义单精度浮点型变量</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">5.5F</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义双精度浮点型变量</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">8.5</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义布尔型变量</span>    <span class="token keyword">boolean</span> bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义字符型变量</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>long类型：建议数据后加L表示。<br>float类型：建议数据后加F表示。  </p></blockquote><h3 id="3-4-注意事项"><a href="#3-4-注意事项" class="headerlink" title="3.4 注意事项"></a>3.4 注意事项</h3><ul><li><strong>变量名称</strong>：在同一个大括号范围内，变量的名字不可以相同。</li><li><strong>变量赋值</strong>：定义的变量，不赋值不能使用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的前世今生</title>
      <link href="/2021/09/20/java-de-qian-shi-jin-sheng/"/>
      <url>/2021/09/20/java-de-qian-shi-jin-sheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-语言概述"><a href="#Java-语言概述" class="headerlink" title="Java 语言概述"></a>Java 语言概述</h1><h3 id="什么是Java语言"><a href="#什么是Java语言" class="headerlink" title="什么是Java语言"></a>什么是Java语言</h3><p>Java语言是美国Sun公司（Stanford University Network），在1995年推出的高级的编程语言。所谓编程语言，是<br>计算机的语言，人们可以使用编程语言对计算机下达命令，让计算机完成人们需要的功能。 </p><p>Java是一门<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1">面向对象</a>编程语言，不仅吸收了<a href="https://baike.baidu.com/item/C%2B%2B">C++</a>语言的各种优点，还摒弃了C++里难以理解的<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BB%A7%E6%89%BF">多继承</a>、<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88/2878304">指针</a>等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。</p><p>Java具有简单性、面向对象、<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F/19276232">分布式</a>、<a href="https://baike.baidu.com/item/%E5%81%A5%E5%A3%AE%E6%80%A7/4430133">健壮性</a>、<a href="https://baike.baidu.com/item/%E5%AE%89%E5%85%A8%E6%80%A7/7664678">安全性</a>、平台独立与可移植性、<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404">多线程</a>、动态性等特点 。Java可以编写<a href="https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/2331979">桌面应用程序</a>、<a href="https://baike.baidu.com/item/Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">Web应用程序</a>、<a href="https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/4905336">分布式系统</a>和<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F/186978">嵌入式系统</a>应用程序等 。</p><p><a href="https://www.oracle.com/cn/java/">Oraclejava中文官网</a></p><h3 id="Java语言发展历史"><a href="#Java语言发展历史" class="headerlink" title="Java语言发展历史"></a>Java语言发展历史</h3><ul><li>1995年Sun公司发布Java1.0版本</li><li>1997年发布Java 1.1版本</li><li>1998年发布Java 1.2版本</li><li>2000年发布Java 1.3版本</li><li>2002年发布Java 1.4版本</li><li>2004年发布Java 1.5版本</li><li>2006年发布Java 1.6版本</li><li>2009年Oracle甲骨文公司收购Sun公司，并于2011发布Java 1.7版本</li><li>2014年发布Java 1.8版本</li><li>2017年发布Java 9.0版本  </li></ul><h3 id="Java语言能做什么"><a href="#Java语言能做什么" class="headerlink" title="Java语言能做什么"></a>Java语言能做什么</h3><p>Java语言主要应用在互联网程序的开发领域。常见的互联网程序比如天猫、京东、物流系统、网银系统等，以及服<br>务器后台处理大数据的存储、查询、数据挖掘等也有很多应用。</p><h3 id="Java编程环境"><a href="#Java编程环境" class="headerlink" title="Java编程环境"></a>Java编程环境</h3><p>​        <a href="https://baike.baidu.com/item/JDK/1011">JDK</a><em>（Java Development Kit）</em>称为Java开发包或Java开发工具，是一个编写Java的Applet小程序和应用程序的程序开发环境。JDK是整个Java的核心，包括了Java运行环境<em>（Java Runtime Environment）</em>，一些Java工具和Java的核心类库<em>（Java API）</em>。不论什么Java应用服务器实质都是内置了某个版本的JDK。主流的JDK是Sun公司发布的JDK，除了Sun之外，还有很多公司和组织都开发了自己的JDK，例如，IBM公司开发的JDK，BEA公司的Jrocket，还有GNU组织开发的JDK。</p><p>​        另外，可以把[Java API](<a href="https://baike.baidu.com/item/Java">https://baike.baidu.com/item/Java</a> API)类库中的Java SE API子集和Java虚拟机这两部分统称为<a href="https://baike.baidu.com/item/JRE">JRE</a><em>（JAVA Runtime Environment）</em>，<a href="https://baike.baidu.com/item/JRE">JRE</a>是支持Java程序运行的标准环境 。</p><p>​        JRE是个运行环境，JDK是个开发环境。因此写Java程序的时候需要JDK，而运行Java程序的时候就需要JRE。而JDK里面已经包含了JRE，因此只要安装了JDK，就可以编辑Java程序，也可以正常运行Java程序。但由于JDK包含了许多与运行无关的内容，占用的空间较大，因此运行普通的Java程序无须安装JDK，而只需要安装JRE即可。</p><h3 id="Java编程工具推荐"><a href="#Java编程工具推荐" class="headerlink" title="Java编程工具推荐"></a>Java编程工具推荐</h3><p><a href="https://baike.baidu.com/item/Eclipse/61703">Eclipse</a>：一个开放源代码的、基于Java的可扩展开发平台 。</p><p>[IntelliJ IDEA](<a href="https://baike.baidu.com/item/IntelliJ">https://baike.baidu.com/item/IntelliJ</a> IDEA)：在代码自动提示、代码分析等方面的具有很好的功能。</p><p><a href="https://baike.baidu.com/item/MyEclipse">MyEclipse</a>：由<a href="https://baike.baidu.com/item/Genuitec">Genuitec</a>公司开发的一款商业化软件，是应用比较广泛的Java应用程序集成开发环境 。</p><h3 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h3><p><strong>1.简单性</strong></p><p>Java看起来设计得很像<a href="https://baike.baidu.com/item/C%2B%2B">C++</a>，但是为了使语言小和容易熟悉，设计者们把C++语言中许多可用的特征去掉了，这些特征是一般程序员很少使用的。例如，Java不支持go to语句，代之以提供<a href="https://baike.baidu.com/item/break/405784">break</a>和<a href="https://baike.baidu.com/item/continue/3009735">continue</a>语句以及异常处理。Java还剔除了C++的操作符过载<em>（</em>*<a href="https://baike.baidu.com/item/overload/5090058">overload</a>*<em>）</em>和多继承特征，并且不使用主文件，免去了预处理程序。因为Java没有结构，数组和串都是对象，所以不需要指针。Java能够自动处理对象的引用和间接引用，实现自动的无用单元收集，使用户不必为存储管理问题烦恼，能更多的时间和精力花在研发上。</p><p><strong>2.面向对象</strong></p><p>Java是一个面向对象的语言。对程序员来说，这意味着要注意其中的数据和操纵数据的方法<em>（method）</em>，而不是严格地用过程来思考。在一个面向对象的系统中，类<em>（</em><em><a href="https://baike.baidu.com/item/class/12502737">class</a>*<em>）</em>是数据和操作数据的方法的集合。数据和方法一起描述对象*（object）</em>的状态和行为。每一对象是其状态和行为的封装。类是按一定体系和层次安排的，使得子类可以从超类继承行为。在这个类层次体系中有一个根类，它是具有一般行为的类。Java程序是用类来组织的。</p><p>Java还包括一个类的扩展集合，分别组成各种程序包<em>（</em><em><a href="https://baike.baidu.com/item/Package">Package</a>*<em>）</em>，用户可以在自己的程序中使用。例如，Java提供产生图形用户接口部件的类*（</em><em><a href="https://baike.baidu.com/item/java.awt">java.awt</a>*<em>包）</em>，这里awt是抽象窗口工具集*（abstract windowing toolkit）</em>的缩写，处理输入输出的类<em>（</em><em><a href="https://baike.baidu.com/item/java.io">java.io</a>*<em>包）</em>和支持网络功能的类*（</em>*<a href="https://baike.baidu.com/item/java.net">java.net</a>*<em>包）</em>。</p><p><strong>3.分布性</strong></p><p>Java设计成支持在网络上应用，它是分布式语言。Java既支持各种层次的网络连接，又以Socket类支持可靠的流<em>（</em>*<a href="https://baike.baidu.com/item/stream">stream</a>*<em>）</em>网络连接，所以用户可以产生分布式的客户机和服务器。</p><p>网络变成软件应用的分布运载工具。Java程序只要编写一次，就可到处运行。</p><p><strong>4.编译和解释性</strong></p><p>Java编译程序生成字节码<em>（byte-code）</em>，而不是通常的机器码。Java字节码提供对体系结构中性的目标文件格式，代码设计成可有效地传送程序到多个平台。Java程序可以在任何实现了Java解释程序和运行系统<em>（run-time system）</em>的系统上运行。</p><p>在一个解释性的环境中，程序开发的标准“链接”阶段大大消失了。如果说Java还有一个链接阶段，它只是把新类装进环境的过程，它是增量式的、<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7/10002835">轻量级</a>的过程。因此，Java支持快速原型和容易试验，它将导致快速程序开发。这是一个与传统的、耗时的“编译、链接和测试”形成鲜明对比的精巧的开发过程。</p><p><strong>5.稳健性</strong></p><p>Java原来是用作编写消费类家用电子产品软件的语言，所以它是被设计成写高可靠和稳健软件的。Java消除了某些编程错误，使得用它写可靠软件相当容易。</p><p>Java是一个强类型语言，它允许扩展编译时检查潜在类型不匹配问题的功能。Java要求显式的方法声明，它不支持C风格的<a href="https://baike.baidu.com/item/%E9%9A%90%E5%BC%8F%E5%A3%B0%E6%98%8E">隐式声明</a>。这些严格的要求保证编译程序能捕捉调用错误，这就导致更可靠的程序。</p><p>可靠性方面最重要的增强之一是Java的存储模型。Java不支持指针，它消除重写存储和<a href="https://baike.baidu.com/item/%E8%AE%B9%E8%AF%AF">讹误</a>数据的可能性。类似地，Java自动的“无用单元收集”预防存储漏泄和其它有关动态存储分配和解除分配的有害错误。Java解释程序也执行许多运行时的检查，诸如验证所有数组和串访问是否在界限之内。</p><p>异常处理是Java中使得程序更稳健的另一个特征。异常是某种类似于错误的异常条件出现的信号。使用try/catch/finally语句，程序员可以找到出错的处理代码，这就简化了出错处理和恢复的任务。</p><p><strong>6.安全性</strong></p><p>Java的存储分配模型是它防御<a href="https://baike.baidu.com/item/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81">恶意代码</a>的主要方法之一。Java没有指针，所以程序员不能得到隐蔽起来的内幕和伪造指针去指向<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8">存储器</a>。更重要的是，Java编译程序不处理存储安排决策，所以程序员不能通过查看<a href="https://baike.baidu.com/item/%E5%A3%B0%E6%98%8E/13130358">声明</a>去猜测类的实际存储安排。编译的Java代码中的存储引用在运行时由Java解释程序决定实际存储地址。</p><p>Java运行系统使用字节码验证过程来保证装载到网络上的代码不违背任何Java语言限制。这个安全机制部分包括类如何从网上装载。例如，装载的类是放在分开的名字空间而不是局部类，预防恶意的小应用程序用它自己的版本来代替标准Java类。</p><p><strong>7.可移植性</strong></p><p>Java使得语言声明不依赖于实现的方面。例如，Java显式说明每个基本数据类型的大小和它的运算行为<em>（这些数据类型由Java语法描述）</em>。</p><p>Java环境本身对新的硬件平台和操作系统是可移植的。Java编译程序也用Java编写，而Java运行系统用ANSIC语言编写。</p><p><strong>8.高性能</strong></p><p>Java是一种先编译后解释的语言，所以它不如全编译性语言快。但是有些情况下性能是很要紧的，为了支持这些情况，Java设计者制作了“及时”编译程序，它能在运行时把Java字节码翻译成特定<a href="https://baike.baidu.com/item/CPU">CPU</a><em>（中央处理器）</em>的机器代码，也就是实现全编译了。</p><p>Java字节码格式设计时考虑到这些“及时”编译程序的需要，所以生成机器代码的过程相当简单，它能产生相当好的代码。</p><p><strong>9.多线程性</strong></p><p>Java是多线程语言，它提供支持多线程的执行<em>（也称为轻便过程）</em>，能处理不同任务，使具有线索的程序设计很容易。Java的lang包提供一个<a href="https://baike.baidu.com/item/Thread/5156974">Thread</a>类，它支持开始线索、运行线索、停止线索和检查线索状态的方法。</p><p>Java的线索支持也包括一组同步原语。这些原语是基于监督程序和条件变量风范，由C.A.R.Haore开发的广泛使用的同步化方案。用关键词<a href="https://baike.baidu.com/item/synchronized">synchronized</a>，程序员可以说明某些方法在一个类中不能并发地运行。这些方法在监督程序控制之下，确保变量维持在一个一致的状态。</p><p><strong>10.动态性</strong></p><p>Java语言设计成适应于变化的环境，它是一个动态的语言。例如，Java中的类是根据需要载入的，甚至有些是通过网络获取的。</p><h3 id="Java工作原理"><a href="#Java工作原理" class="headerlink" title="Java工作原理"></a>Java工作原理</h3><p>（1）Java编程语言</p><p>（2）Java类文件格式</p><p>（3）Java虚拟机</p><p>（4）Java应用程序接口 </p><p>当编辑并运行一个Java程序时，需要同时涉及到这四种方面。使用文字编辑软件<em>（例如</em><em><a href="https://baike.baidu.com/item/%E8%AE%B0%E4%BA%8B%E6%9C%AC/2519">记事本</a><strong>、</strong><a href="https://baike.baidu.com/item/%E5%86%99%E5%AD%97%E6%9D%BF">写字板</a><strong>、</strong><a href="https://baike.baidu.com/item/UltraEdit">UltraEdit</a>*<em>等）</em>或集成开发环境*（</em><em><a href="https://baike.baidu.com/item/Eclipse/61703">Eclipse</a><strong>、</strong><a href="https://baike.baidu.com/item/MyEclipse">MyEclipse</a>*<em>等）</em>在Java源文件中定义不同的类 [26] ，通过调用类*（这些类实现了Java API）</em>中的方法来访问资源系统，把源文件编译生成一种二进制中间码，存储在class文件中，然后再通过运行与操作系统平台环境相对应的Java虚拟机来运行class文件，执行编译产生的字节码，调用class文件中实现的方法来满足程序的Java API调用  。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
